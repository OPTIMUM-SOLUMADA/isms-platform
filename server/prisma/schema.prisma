// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===========================================================================================
// DEPARTMENT
// ===========================================================================================
model Department {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  // managerId String? @db.ObjectId
  // manager   User[]   @relation("ManagedDepartment")
  members User[] @relation("DepartmentMembers")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  documents Document[] @relation("DepartmentDocuments")

  @@map("departments")
}

// ===========================================================================================
// USERS MANAGEMENT AND ROLES
// ===========================================================================================

enum RoleType {
  ADMIN
  CONTRIBUTOR
  REVIEWER
  VIEWER
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  name         String?
  role         RoleType  @default(VIEWER)
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  // ssoId        String?   @unique
  passwordHash String?

  departmentId String?     @db.ObjectId
  department   Department? @relation("DepartmentMembers", fields: [departmentId], references: [id], onDelete: Restrict)
  // managedDept  Department? @relation("ManagedDepartment")

  passwordResetToken String?

  documentReviews   DocumentReview[]
  documentApprovals DocumentApproval[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metadata          Json?
  documentOwners    DocumentOwner[]    @relation("DocumentOwnerUser")
  documentReviewers DocumentReviewer[] @relation("DocumentReviewerUser")

  @@index([email, isActive])
  @@index([role])
  @@map("users")
}

// ===========================================================================================
// DOCUMENTS MANAGEMENT AND POLITICS
// ===========================================================================================

model DocumentType {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  // isoClauseNumber String?
  documents   Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("document_types")
}

enum DocumentStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  EXPIRED
}

enum ReviewFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  YEARLY
  BIENNIAL
  AS_NEEDED
}

model Document {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  fileUrl         String?
  status          DocumentStatus   @default(DRAFT)
  nextReviewDate  DateTime?
  reviewFrequency ReviewFrequency?
  isoClauseId     String           @db.ObjectId

  published       Boolean   @default(false)
  publicationDate DateTime?

  departmentId String  @db.ObjectId
  categoryId   String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  department    Department?        @relation("DepartmentDocuments", fields: [departmentId], references: [id], onDelete: Restrict)
  isoClause     ISOClause          @relation(fields: [isoClauseId], references: [id])
  type          DocumentType?      @relation(fields: [categoryId], references: [id])
  versions      DocumentVersion[]
  reviews       DocumentReview[]
  approvals     DocumentApproval[]
  notifications Notification[]
  auditlogs     AuditLog[]
  owners        DocumentOwner[]    @relation("DocumentOwnerDocument")
  reviewers     DocumentReviewer[] @relation("DocumentReviewerDocument")

  @@index([title])
  @@map("documents")
}

model DocumentOwner {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  documentId String @db.ObjectId
  userId     String @db.ObjectId

  document Document @relation(name: "DocumentOwnerDocument", fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(name: "DocumentOwnerUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_owners")
}

model DocumentReviewer {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  documentId String @db.ObjectId
  userId     String @db.ObjectId

  document Document @relation(name: "DocumentReviewerDocument", fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(name: "DocumentReviewerUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_reviewers")
}

model ISOClause {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  code        String     @unique
  name        String
  description String?
  documents   Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("iso_clauses")
}

model DocumentVersion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  documentId String   @db.ObjectId
  version    String
  comment    String?
  createdAt  DateTime @default(now())
  isCurrent  Boolean  @default(false) // optional: flag the latest version
  fileUrl    String?

  document  Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  approvals DocumentApproval[]

  @@index([documentId, version])
  @@map("document_versions")
}

// ===========================================================================================
// REVIEWS SYSTEM, APPROVAL AND NOTIFICATIONS
// ===========================================================================================
enum ReviewDecision {
  APPROVE
  REJECT
  REQUEST_CHANGES
}

// Ce modèle est plus robuste et inclut l'état de la révision et les commentaire
model DocumentReview {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  documentId  String          @db.ObjectId
  reviewerId  String          @db.ObjectId
  comment     String? // Ajouté : Pour "commenter une politique pendant le processus de révision"
  decision    ReviewDecision?
  isApproved  Boolean? // Ajouté : Indique si le réviseur a approuvé
  isCompleted Boolean         @default(false) // Ajouté : pour suivre si la tâche est terminée
  reviewDate  DateTime? // Ajouté : La date à laquelle la révision a été effectuée

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  reviewer User     @relation(fields: [reviewerId], references: [id])

  @@index([documentId])
  @@index([reviewerId])
  @@map("document_reviews")
}

// Ce modèle est la piste d'audit des approbations.
model DocumentApproval {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  documentId String   @db.ObjectId
  approverId String   @db.ObjectId
  versionId  String   @db.ObjectId
  approvedAt DateTime @default(now())

  document Document        @relation(fields: [documentId], references: [id])
  version  DocumentVersion @relation(fields: [versionId], references: [id])
  approver User            @relation(fields: [approverId], references: [id])

  @@unique([documentId, versionId, approverId])
  @@map("document_approvals")
}

// Les notifications sont essentielles pour les rappels et les alertes.
enum NotificationType {
  REVIEW_NEEDED
  REVIEW_OVERDUE
  DOCUMENT_APPROVED
  DOCUMENT_UPDATED
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  type       NotificationType
  title      String
  message    String
  isRead     Boolean          @default(false)
  documentId String?          @db.ObjectId // Ajouté : Pour lier la notification à un document
  createdAt  DateTime         @default(now())

  user     User      @relation(fields: [userId], references: [id])
  document Document? @relation(fields: [documentId], references: [id])

  @@map("notifications")
}

// ===========================================================================================
// AUDIT LOGS
// ===========================================================================================

enum AuditEventType {
  DOCUMENT_UPLOAD
  DOCUMENT_UPDATE
  DOCUMENT_VERSION_CREATED
  DOCUMENT_STATUS_CHANGE
  DOCUMENT_REVIEW_SUBMITTED
  USER_ROLE_CHANGE
  ACCESS_LOG // Journal d'accès au document
  EXPORT_LOGS // Exportation des journaux
}

model AuditLog {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?        @db.ObjectId
  eventType  AuditEventType
  documentId String?        @db.ObjectId
  details    Json? // Stocke les détails de l'événement (e.g. { oldStatus: 'DRAFT', newStatus: 'IN_REVIEW' })
  timestamp  DateTime       @default(now())

  user     User?     @relation(fields: [userId], references: [id])
  document Document? @relation(fields: [documentId], references: [id])

  @@index([userId, documentId, eventType, timestamp])
  @@map("audit_logs")
}
